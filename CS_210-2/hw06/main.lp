(setq family '(
(ahmet olivia frederick)
(alan marie donny)
(amon nil nil)
(andre anna amon)
(anna nil nil)
(arthur nil nil)
(bruce kate arthur)
(buffy joyce joshua)
(charles kate arthur)
(cisco zelda joshua)
(colin nil nil)
(david kate arthur)
(dawn joyce joshua)
(deirdre nil nil )
(diane erica peter)
(diva nil charles)
(donny ellen george)
(dweezil hillary david)
(ellen kate arthur)
(erica nil nil)
(frank nil nil)
(frederick tamara nil)
(frida wanda vincent)
(george linda frank)
(hillary linda frank)
(ivan ellen george)
(jay marie donny)
(jimmy marie donny)
(joshua wanda ivan)
(julie ellen george)
(kate nil nil)
(linda nil nil)
(marie ellen george)
(moon-unit hillary charles)
(nigel hillary andre)
(olivia marie nigel)
(peter marie nigel)
(pi marie callendar)
(quentin nil nil)
(rabbit donny darka)
(robert julie quentin)
(rodan nil charles)
(suzanne deirdre colin)
(tamara suzanne bruce)
(uma julie nigel)
(vincent suzanne bruce)
(virl marie donny)
(wanda nil nil)
(yvette zelda robert)
(zelda wanda vincent)
))

(defun flat (x) (mapcan #'(lambda (z) (cond ((listp z) (flat z))
                                                 (T (list z))
)) x))

(defun the-family () 
	(remove-duplicates (flat family))
)

(defun father(x)
	(setq l	(mapcar #'(lambda (z) 
				(if (eq x (car z)) (cdr(cdr z)))
			  ) 
		family)
	)
	(delete-duplicates l)
	(delete nil l)
	(flat l)
	(car (flat l))
)

(defun mother(x)
	(setq l	(mapcar #'(lambda (z) 
				(if (eq x (car z)) (car(cdr z)))
			  ) 
		family)
	)
	(delete-duplicates l)
	(delete nil l)
	(flat l)
	(car (flat l))
)

(defun parents(x)
	(setq l (mapcar #'(lambda (z) 
				(if (eq x (car z)) (cdr z))
			  ) 
		family)
	)
	(setq l (flat l))
	(delete-duplicates l)
	(delete nil l)
	(flat l)

)

(defun grandparents (x)
	(setq l (parents (father x)))
	(append l (parents (mother x)))
)

(defun children(x)
	(setq retl (mapcar #'(lambda (z) 
				(if (eq x (car z)) (cdr z))
			  ) 
		family)
	)
	;(setq retl (flat retl))
	;(delete-duplicates retl)
	;(delete nil retl)
	;(flat retl)
)

(defun siblings (x)
	(setq l (mapcar #'(lambda (z)
				(if (equal (father x) (father (car z))) (car z))
				(if (equal (mother x) (mother (car z))) (car z))
			  )
		family)
	)
	(setq l (flat l))
	(delete x l)
)

(defun full-siblings (x)
	(setq l (mapcar #'(lambda (z)
				(if (equal (parents x) (parents (car z))) (car z))
			  )
		family)
	)
	(setq l (flat l))
	(delete x l)
)

(defun half-siblings (x)
	(set-difference (siblings x) (full-siblings x))
)

(defun aunts-uncles (x)
	(setq l (siblings (father x)))
	(append l (siblings (mother x)))
)

(defun first-cousins (x)
	(setq l (mapcar #'(lambda (x) 
				x
			  )
		(parents x))
	)
)

(format t "the-family:")
(the-family)
(format t "father:")
(father 'alan)
(format t "mother:")
(mother 'alan)
(format t "parents:")
(parents 'ahmet)
(format t "grandparents:")
(grandparents 'ahmet)
;(format t "children:")
;(children 'kate)
(format t "siblings:")
(siblings 'wanda)
(format t "full-siblings:")
(full-siblings 'zelda)
(format t "half-siblings:")
(half-siblings 'zelda)
(format t "aunt-uncles:")
(aunts-uncles 'ahmet)

(exit)

